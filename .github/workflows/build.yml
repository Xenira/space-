name: Docker Image CI

on:
  push:
    branches: [ master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: xenira/space3
  CARGO_TERM_COLOR: always
  DOCKER_BUILDKIT: '1'
  TAG: ${{ github.sha }}
  
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  build:
    runs-on: ubuntu-latest
    environment:
      name: preview
      url: https://github.com/Xenira/space3
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - id: cache
        uses: actions/cache@v3
        with:
          path: /tmp/docker-registry
          key: docker-registry-buildkit-${{ hashFiles('Dockerfile') }}

      - name: Start cache registry
        run: docker run -d -p 5000:5000 --restart=always --name registry -v /tmp/docker-registry:/var/lib/registry registry:2 && npx wait-on tcp:5000

      - name: build chef 
        run: docker build . --target chef -t ${{ env.image_name }}/chef --cache-from=localhost:5000/${{ env.image_name }}/chef --build-arg BUILDKIT_INLINE_CACHE=1
      - name: cache chef 
        run: docker tag ${{ env.image_name }}/chef localhost:5000/${{ env.image_name }}/chef && docker push localhost:5000/${{ env.image_name }}/chef || true
        if: steps.cache.outputs.cache-hit != 'true'
        
      - name: build trunk 
        run: docker build . --target trunk -t ${{ env.image_name }}/trunk --cache-from=localhost:5000/${{ env.image_name }}/trunk --build-arg BUILDKIT_INLINE_CACHE=1
      - name: cache trunk 
        run: docker tag ${{ env.image_name }}/trunk localhost:5000/${{ env.image_name }}/trunk && docker push localhost:5000/${{ env.image_name }}/trunk || true
        if: steps.cache.outputs.cache-hit != 'true'
        
      - name: build planner-client 
        run: docker build . --target planner-client -t ${{ env.image_name }}/planner-client --cache-from=localhost:5000/${{ env.image_name }}/planner-client --build-arg BUILDKIT_INLINE_CACHE=1
      - name: cache planner-client 
        run: docker tag ${{ env.image_name }}/planner-client localhost:5000/${{ env.image_name }}/planner-client && docker push localhost:5000/${{ env.image_name }}/planner-client || true
        if: steps.cache.outputs.cache-hit != 'true'
        
      - name: build builder-client 
        run: docker build . --target builder-client -t ${{ env.image_name }}/builder-client --build-arg BASE_URL="https://${{ env.image_name }}.herokuapp.com/" --cache-from=localhost:5000/${{ env.image_name }}/builder-client --build-arg BUILDKIT_INLINE_CACHE=1
      - name: cache builder-client 
        run: docker tag ${{ env.image_name }}/builder-client localhost:5000/${{ env.image_name }}/builder-client && docker push localhost:5000/${{ env.image_name }}/builder-client || true
        if: steps.cache.outputs.cache-hit != 'true'
        
      - name: build planner-server 
        run: docker build . --target planner-server -t ${{ env.image_name }}/planner-server --cache-from=localhost:5000/${{ env.image_name }}/planner-server --build-arg BUILDKIT_INLINE_CACHE=1
      - name: cache planner-server 
        run: docker tag ${{ env.image_name }}/planner-server localhost:5000/${{ env.image_name }}/planner-server && docker push localhost:5000/${{ env.image_name }}/planner-server || true
        if: steps.cache.outputs.cache-hit != 'true'
        
      - name: build builder-server 
        run: docker build . --target builder-server -t ${{ env.image_name }}/builder-server --cache-from=localhost:5000/${{ env.image_name }}/builder-server --build-arg BUILDKIT_INLINE_CACHE=1
      - name: cache builder-server 
        run: docker tag ${{ env.image_name }}/builder-client localhost:5000/${{ env.image_name }}/builder-server && docker push localhost:5000/${{ env.image_name }}/builder-server || true
        if: steps.cache.outputs.cache-hit != 'true'
        
      - name: build server
        run: docker build . --target server -t ${{ env.IMAGE_NAME }} --cache-from=localhost:5000/${{ env.IMAGE_NAME }} --build-arg BUILDKIT_INLINE_CACHE=1
      - name: cache server
        run: docker tag ${{ env.IMAGE_NAME }} localhost:5000/${{ env.IMAGE_NAME }} && docker push localhost:5000/${{ env.IMAGE_NAME }} || true
        if: steps.cache.outputs.cache-hit != 'true'
  
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Tag the image
        run: docker tag ${{ env.IMAGE_NAME }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}

      - name: Tag release the image
        if: startsWith(github.ref, 'refs/tags/v')
        run: docker tag ${{ env.IMAGE_NAME }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest && docker tag ${{ env.IMAGE_NAME }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}

      - name: Push the image
        run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}

      - name: Push release the image
        if: startsWith(github.ref, 'refs/tags/v')
        run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest && docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
